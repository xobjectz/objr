#!/usr/bin/env python3
# This file is placed in the Public Domain.
#
# pylint: disable=C0413,C0103


"""OBJR - objects runtime

    objr  <cmd> [key=val] [key==val]
    objr  [-a] [-c] [-h] [-v]

    options are:

    -a     load all modules
    -c     start console
    -h     show help
    -v     use verbose

    the cmd command show available commands.
    
    $ objr cmd
    cfg,cmd,dpl,err,exp,imp,mod,mre,nme,pwd,rem,res,rss,thr

"""

import os
import pwd
import readline # pylint: disable=W0611
import sys
import termios
import time


sys.path.insert(0, os.getcwd())


from objx import Default, parse


from objr.client  import Client, cmnd, init, scan
from objr.errors  import errors, setout
from objr.handler import Event
from objr.log     import debug, enable
from objr.run     import broker
from objr.utils   import cdir


Cfg             = Default()
Cfg.dis         = ""
Cfg.mod         = "cmd,err,mod,thr"
Cfg.opts        = ""
Cfg.name        = __file__.rsplit(os.sep, maxsplit=1)[-1]
Cfg.version     = "81"
Cfg.wdr         = os.path.expanduser(f"~/.{Cfg.name}")
Cfg.mdir        = os.path.join(Cfg.wdr, "mods")
Cfg.pidfile     = os.path.join(Cfg.wdr, f"{Cfg.name}.pid")


class Console(Client):

    "Console"

    def __init__(self):
        Client.__init__(self)
        broker.add(self)

    def announce(self, txt):
        "disable announce."

    def callback(self, evt):
        "wait for callback."
        Client.callback(self, evt)
        evt.wait()

    def poll(self):
        "poll console and create event."
        evt = Event()
        evt.orig = object.__repr__(self)
        evt.txt = input("> ")
        evt.type = "command"
        return evt

    def say(self, _channel, txt):
        "print to console"
        txt = txt.encode('utf-8', 'replace').decode()
        print(txt)


def daemon(verbose=False):
    "switch to background."
    # pylint: disable=W0212
    pid = os.fork()
    if pid != 0:
        os._exit(0)
    os.setsid()
    pid2 = os.fork()
    if pid2 != 0:
        os._exit(0)
    if not verbose:
        with open('/dev/null', 'r', encoding="utf-8") as sis:
            os.dup2(sis.fileno(), sys.stdin.fileno())
        with open('/dev/null', 'a+', encoding="utf-8") as sos:
            os.dup2(sos.fileno(), sys.stdout.fileno())
        with open('/dev/null', 'a+', encoding="utf-8") as ses:
            os.dup2(ses.fileno(), sys.stderr.fileno())
    os.umask(0)
    os.chdir("/")


def forever():
    "run forever."
    while True:
        time.sleep(1.0)


def getmods(path, modname="mods"):
    "return modules"
    path = os.path.dirname(path)
    if path not in sys.path:
        sys.path.insert(0, path)
    return __import__(modname)


def pidfile(path):
    "create pidfile"
    if os.path.exists(path):
        os.unlink(path)
    cdir(path)
    with open(path, "w", encoding="utf-8") as fds:
        fds.write(str(os.getpid()))


def privileges(username):
    "drop privileges."
    pwnam = pwd.getpwnam(username)
    os.setgid(pwnam.pw_gid)
    os.setuid(pwnam.pw_uid)


def wrap(func):
    "restore console."
    old2 = None
    try:
        old2 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    finally:
        if old2:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old2)
    errors()


def main():
    "main"
    parse(Cfg, " ".join(sys.argv[1:]))
    modules = getmods(Cfg.sets.mdir or "mods")
    if "h" in Cfg.opts:
        print(__doc__)
        return
    if "a" in Cfg.opts:
        Cfg.mod = ",".join(dir(modules))
    if "d" in Cfg.opts:
        Cfg.mod = ",".join(dir(modules))
        daemon("v" in Cfg.opts)
        scan(modules, Cfg.mod, Cfg.sets.dis)
        init(modules, Cfg.mod, Cfg.sets.dis)
        pidfile(Cfg.pidfile)
        forever()
        return
    if "v" in Cfg.opts:
        setout(print)
        enable(print)
        dte = " ".join(time.ctime(time.time()).replace("  ", " ").split()[1:])
        debug(f'{dte} {Cfg.name.upper()} {Cfg.opts.upper()} {Cfg.mod.upper()}'.replace("  ", " "))
    scan(modules, Cfg.mod, Cfg.sets.dis)
    if "c" in Cfg.opts:
        init(modules, Cfg.mod, Cfg.sets.dis)
        csl = Console()
        csl.start()
        forever()
    elif Cfg.otxt:
        cmnd(Cfg.otxt, print)


if __name__ == "__main__":
    wrap(main)
